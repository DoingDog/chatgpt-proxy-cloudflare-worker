const myopenaikeys = ["Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"],
  mykamiyatokens = ["not set"],
  myapipasswords = ["Bearer 11111111"];

addEventListener("fetch",e=>{e.respondWith(handleRequest(e.request).catch(({stack:e})=>new Response(e,{headers:{"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"},status:500})))});async function handleRequest(e){if(e.url===`${new URL(e.url).origin}/`){let t=await e.clone().text(),a={url:e.url,method:e.method,data:t,headers:Object.fromEntries(e.headers),cf:Object.fromEntries(Object.entries(e.cf))};return new Response(JSON.stringify(a,null,2),{headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"}})}function s(e){let t={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"};switch(e){case 400:return new Response(JSON.stringify({error:{message:"400 Bad Request",code:400}},null,2),{headers:t,status:400});case 401:return new Response(JSON.stringify({error:{message:"401 Unauthorized",code:401}},null,2),{headers:t,status:401});case 403:return new Response(JSON.stringify({error:{message:"403 Forbidden",code:403}},null,2),{headers:t,status:403});case 404:return new Response(JSON.stringify({error:{message:"404 Not Found",code:404}},null,2),{headers:t,status:404});case 405:return new Response(JSON.stringify({error:{message:"405 Method Not Allowed",code:405}},null,2),{headers:t,status:405});case 408:return new Response(JSON.stringify({error:{message:"408 Request Timeout",code:408}},null,2),{headers:t,status:408});case 410:return new Response(JSON.stringify({error:{message:"410 Gone",code:410}},null,2),{headers:t,status:410});case 413:return new Response(JSON.stringify({error:{message:"413 Payload Too Large",code:413}},null,2),{headers:t,status:413});case 429:return new Response(JSON.stringify({error:{message:"429 Too Many Requests",code:429}},null,2),{headers:t,status:429});case 500:return new Response(JSON.stringify({error:{message:"500 Internal Server Error",code:500}},null,2),{headers:t,status:500});case 502:return new Response(JSON.stringify({error:{message:"502 Bad Gateway",code:502}},null,2),{headers:t,status:502});case 503:return new Response(JSON.stringify({error:{message:"503 Service Unavailable",code:503}},null,2),{headers:t,status:503});default:return null}}if("POST"!==e.method&&"GET"!==e.method&&"OPTIONS"!==e.method)return s(405);let r=new URL(e.url),n=e.headers.get("Access-Control-Allow-Origin")||"*",o=["completions","generations","transcriptions","edits","embeddings","translations","variations","files","fine-tunes","moderations"],i=await e.clone().text(),l=r.pathname.split("?")[0].split("/").pop(),h=myopenaikeys[Math.floor(Math.random()*myopenaikeys.length)],c=mykamiyatokens[Math.floor(Math.random()*mykamiyatokens.length)];if(o.includes(l)&&("POST"===e.method||"GET"===e.method)){let u=e.headers.get("Authorization");if(!u)return s(401);myapipasswords.includes(u)||(h=u,c=u)}else if(!o.includes(l)&&!["usage","login","getDetails"].includes(l))return s(403);let d=Object.fromEntries(e.headers);switch(Object.assign(d,{"user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36","sec-ch-ua":'"Chromium";v="116", "Google Chrome";v="116", "Not:A-Brand";v="99"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"macOS"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site",Pragma:"no-cache","Cache-Control":"no-cache"}),!0){case r.pathname.startsWith("/openai"):case r.pathname.startsWith("/v1"):r.host="api.openai.com",r.pathname=r.pathname.replace(/^\/openai\//,"/"),Object.assign(d,{authorization:h,"content-type":"application/json",origin:"https://bettergpt.chat",referer:"https://bettergpt.chat/",authority:r.host});break;case r.pathname.startsWith("/churchless"):r.host="free.churchless.tech",r.pathname=r.pathname.replace(/^\/churchless\//,"/"),Object.assign(d,{authorization:"Bearer sk-none","content-type":"application/json",origin:"https://acheong08.github.io",referer:"https://acheong08.github.io/",authority:r.host});break;case r.pathname.startsWith("/kamiya"):r.host="fastly-k1.kamiya.dev",r.pathname=r.pathname.replace(/^\/kamiya\//,"/"),r.pathname=r.pathname.replace(/^\/v1\//,"/api/openai/"),Object.assign(d,{authorization:c,"content-type":"application/json",origin:"https://chat.kamiya.dev",referer:"https://chat.kamiya.dev/",authority:r.host,path:"/api/openai/chat/completions"});break;case r.pathname.startsWith("/kmyalogin"):r.host="fastly-k1.kamiya.dev",r.pathname=r.pathname.replace(/^\/kmyalogin\//,"/"),Object.assign(d,{authorization:c,"content-type":"application/json",origin:"https://www.kamiya.dev",referer:"https://www.kamiya.dev/",authority:r.host});break;default:return s(404)}let p=new Headers;for(let[m,g]of Object.entries(d))p.append(m,g);let $;try{$=new Request(r.toString(),{headers:p,body:e.body,method:e.method,redirect:"follow"})}catch(f){return s(400)}if("POST"===e.method&&r.pathname.endsWith("/completions")&&i){let y;try{y=JSON.parse(i)}catch(w){return s(400)}let _=y.messages,A=_[_.length-1],b=A.content,k=_[_.length-3],C="";if(k&&(C=k.content),b.includes("WS[")||C.includes("WS[")){let v=[];function S(e,t){let a=0,s=e.match(/WS\[[^\]]+\]/g);if(s)for(let r of s){let n=r.slice(3,-1);a<2&&(t.push(n),a++)}return null}if(S(b,v),C&&S(C,v),v.length>=1){let T=[],O=v.length<=2?10:5;for(let W of v)try{let q=await fetch(`https://api-ddg.iii.hair/search?q=${W}&max_results=${O}`),j=await q.json(),z=j.map(({title:e,body:t,href:a})=>`'${e}' : ${t} ; (${a})`).join("\n");T.push(`

[${W}]
${z}`)}catch(E){try{let G=await fetch(`https://ddg-api.herokuapp.com/search?query=${W}&limit=${O}`),P=await G.json(),M=P.map(({title:e,snippet:t,link:a})=>`'${e}' : ${t} ; (${a})`).join("\n");T.push(`

[${W}]
${M}`)}catch(B){return s(502)}}A.content=`${b.replace(/WS\[[^\]]*\]/g,"")}

Current date:${new Date().toLocaleString()} UTC

Instructions: Answer me in the language used in my request or question above. Answer the questions or requests I made above in a comprehensive way. Below are some web search results. Use them if you need.
${T}`,y.messages[_.length-1]=A,$=new Request($,{body:JSON.stringify(y)})}}}try{let H=await fetch($),I=new Response(H.body,H),R=s(I.status);if(("POST"===e.method||"GET"===e.method)&&r.pathname.endsWith("/completions")&&R)return R;return I.headers.set("Access-Control-Allow-Origin",n),I.headers.set("Access-Control-Allow-Headers","*"),I}catch(x){return s(502)}}
