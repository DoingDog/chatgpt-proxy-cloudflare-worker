const myopenaikeys = ["Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"],
  mykamiyatokens = ["not set"],
  myapipasswords = ["Bearer 11111111"];

function httpErrorHandler(e){let t={"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*"};switch(e){case 400:return new Response("400 Bad Request",{headers:t,status:400});case 401:return new Response("401 Unauthorized",{headers:t,status:401});case 403:return new Response("403 Forbidden",{headers:t,status:403});case 404:return new Response("404 Not Found",{headers:t,status:404});case 405:return new Response("405 Method Not Allowed",{headers:t,status:405});case 408:return new Response("408 Request Timeout",{headers:t,status:408});case 410:return new Response("410 Gone",{headers:t,status:410});case 413:return new Response("413 Payload Too Large",{headers:t,status:413});case 429:return new Response("429 Too Many Requests",{headers:t,status:429});case 500:return new Response("500 Internal Server Error",{headers:t,status:500});case 502:return new Response("502 Bad Gateway",{headers:t,status:502});case 503:return new Response("503 Service Unavailable",{headers:t,status:503});default:return null}}async function handleRequest(e){if("POST"!==e.method&&"GET"!==e.method&&"OPTIONS"!==e.method)return httpErrorHandler(405);let t=new URL(e.url),a=e.headers.get("Access-Control-Allow-Origin")||"*",s=["completions","generations","transcriptions","edits","embeddings","translations","variations","files","fine-tunes","moderations"],r=await e.clone().text(),n=t.pathname.split("?")[0].split("/").pop(),h=myopenaikeys[Math.floor(Math.random()*myopenaikeys.length)],o=mykamiyatokens[Math.floor(Math.random()*mykamiyatokens.length)],i="ini",c="ini";if(s.includes(n)&&("POST"===e.method||"GET"===e.method)){let l=e.headers.get("Authorization");if(!l)return httpErrorHandler(401);myapipasswords.includes(l)||(h=l,o=l)}else if(!s.includes(n)&&!["usage","login","getDetails"].includes(n))return httpErrorHandler(403);switch(!0){case t.pathname.startsWith("/openai"):case t.pathname.startsWith("/v1"):c="https://api.openai.com",t.host=c.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/openai\//,"/"),i="openai";break;case t.pathname.startsWith("/churchless"):c="https://free.churchless.tech",t.host=c.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/churchless\//,"/"),i="churchless";break;case t.pathname.startsWith("/kamiya"):c="https://fastly-k1.kamiya.dev",t.host=c.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/kamiya\//,"/"),t.pathname=t.pathname.replace(/^\/v1\//,"/api/openai/"),i="kamiya";break;case t.pathname.startsWith("/kmyalogin"):c="https://fastly-k1.kamiya.dev",t.host=c.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/kmyalogin\//,"/"),i="kmyalogin";break;default:return httpErrorHandler(404)}let d=new Request(t.toString(),{headers:e.headers,body:e.body,method:e.method,redirect:"follow"});switch(d.headers.set("user-agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"),d.headers.set("sec-ch-ua",'"Chromium";v="116", "Google Chrome";v="116", "Not:A-Brand";v="99"'),d.headers.set("sec-ch-ua-mobile","?0"),d.headers.set("sec-ch-ua-platform",'"macOS"'),d.headers.set("sec-fetch-dest","empty"),d.headers.set("sec-fetch-mode","cors"),d.headers.set("sec-fetch-site","same-site"),d.headers.set("Pragma","no-cache"),d.headers.set("Cache-Control","no-cache"),i){case"openai":d.headers.set("authorization",h),d.headers.set("content-type","application/json"),d.headers.set("origin","https://bettergpt.chat"),d.headers.set("referer","https://bettergpt.chat/"),d.headers.set("authority","api.openai.com");break;case"churchless":d.headers.set("authorization","Bearer sk-none"),d.headers.set("content-type","application/json"),d.headers.set("origin","https://acheong08.github.io"),d.headers.set("referer","https://acheong08.github.io/"),d.headers.set("authority","free.churchless.tech");break;case"kamiya":d.headers.set("authorization",o),d.headers.set("content-type","application/json"),d.headers.set("origin","https://chat.kamiya.dev"),d.headers.set("referer","https://chat.kamiya.dev/"),d.headers.set("authority","fastly-k1.kamiya.dev"),d.headers.set("path","/api/openai/chat/completions");break;case"kmyalogin":d.headers.set("authorization",o),d.headers.set("content-type","application/json"),d.headers.set("origin","https://www.kamiya.dev"),d.headers.set("referer","https://www.kamiya.dev/"),d.headers.set("authority","fastly-k1.kamiya.dev");break;default:return httpErrorHandler(404)}if("POST"===e.method&&t.pathname.endsWith("/completions")&&r){let p=await JSON.parse(r),u=p.messages,m=u[u.length-1],$=m.content,g=u[u.length-3],y="";if(g&&(y=g.content),$.includes("WS[")||y.includes("WS[")){let w=[];function f(e,t){let a=0,s=e.match(/WS\[[^\]]+\]/g);if(s)for(let r of s){let n=r.slice(3,-1);a<2&&(t.push(n),a++)}return null}if(f($,w),y&&f(y,w),w.length>=1){let k=[],_=w.length<=2?10:5;for(let b of w)try{let v=await fetch(`https://api-ddg.iii.hair/search?q=${b}&max_results=${_}`),S=await v.json(),T=S.map(({title:e,body:t,href:a})=>`'${e}' : ${t} ; (${a})`).join("\n");k.push(`

[${b}]
${T}`)}catch(A){try{let C=await fetch(`https://ddg-api.herokuapp.com/search?query=${b}&limit=${_}`),E=await C.json(),W=E.map(({title:e,snippet:t,link:a})=>`'${e}' : ${t} ; (${a})`).join("\n");k.push(`

[${b}]
${W}`)}catch(q){return httpErrorHandler(502)}}m.content=`${$.replace(/WS\[[^\]]*\]/g,"")}

Current date:${new Date().toLocaleString()} UTC

Instructions: Answer me in the language used in my request or question above. Answer the questions or requests I made above in a comprehensive way. Below are some web search results. Use them if you need.
${k}`,p.messages[u.length-1]=m,d=new Request(d,{body:JSON.stringify(p)})}}}try{let O=await fetch(d),H=new Response(O.body,O),j=httpErrorHandler(H.status);if(("POST"===e.method||"GET"===e.method)&&t.pathname.endsWith("/completions")&&j)return j;return H.headers.set("Access-Control-Allow-Origin",a),H}catch(z){return httpErrorHandler(502)}}addEventListener("fetch",e=>{e.respondWith(handleRequest(e.request).catch(({stack:e})=>new Response(e,{headers:{"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*"},status:500})))});
