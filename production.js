const myopenaikeys = ["Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"],
  mykamiyatokens = ["not set"],
  myapipasswords = ["Bearer 11111111"];

function httpErrorHandler(e){let t={"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*"};switch(e){case 400:return new Response("400 Bad Request",{headers:t,status:400});case 401:return new Response("401 Unauthorized",{headers:t,status:401});case 403:return new Response("403 Forbidden",{headers:t,status:403});case 404:return new Response("404 Not Found",{headers:t,status:404});case 408:return new Response("408 Request Timeout",{headers:t,status:408});case 410:return new Response("410 Gone",{headers:t,status:410});case 413:return new Response("413 Payload Too Large",{headers:t,status:413});case 429:return new Response("429 Too Many Requests",{headers:t,status:429});case 500:return new Response("500 Internal Server Error",{headers:t,status:500});case 502:return new Response("502 Bad Gateway",{headers:t,status:502});case 503:return new Response("503 Service Unavailable",{headers:t,status:503});default:return null}}async function handleRequest(e){let t=new URL(e.url),a=e.headers.get("Access-Control-Allow-Origin")||"*",s=await e.clone().text(),r=t.pathname.split("/").pop(),n=myopenaikeys[Math.floor(Math.random()*myopenaikeys.length)],h=mykamiyatokens[Math.floor(Math.random()*mykamiyatokens.length)],o="ini",i="ini";if(["completions","generations","transcriptions","edits","embeddings","translations","variations","files","fine-tunes","moderations"].includes(r)&&("POST"===e.method||"GET"===e.method)){let c=e.headers.get("Authorization");if(!c)return httpErrorHandler(401);myapipasswords.includes(c)||(n=c,h=c)}switch(!0){case t.pathname.startsWith("/openai"):case t.pathname.startsWith("/v1"):i="https://api.openai.com",t.host=i.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/openai\//,"/"),o="openai";break;case t.pathname.startsWith("/churchless"):i="https://free.churchless.tech",t.host=i.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/churchless\//,"/"),o="churchless";break;case t.pathname.startsWith("/kamiya"):i="https://fastly-k1.kamiya.dev",t.host=i.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/kamiya\//,"/"),t.pathname=t.pathname.replace(/^\/v1\//,"/api/openai/"),o="kamiya";break;case t.pathname.startsWith("/kmyalogin"):i="https://fastly-k1.kamiya.dev",t.host=i.replace(/^https?:\/\//,""),t.pathname=t.pathname.replace(/^\/kmyalogin\//,"/"),o="kmyalogin";break;default:return httpErrorHandler(404)}let l=new Request(t.toString(),{headers:e.headers,body:e.body,method:e.method,redirect:"follow"});switch(l.headers.set("user-agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"),l.headers.set("sec-ch-ua",'"Chromium";v="116", "Google Chrome";v="116", "Not:A-Brand";v="99"'),l.headers.set("sec-ch-ua-mobile","?0"),l.headers.set("sec-ch-ua-platform",'"macOS"'),l.headers.set("sec-fetch-dest","empty"),l.headers.set("sec-fetch-mode","cors"),l.headers.set("sec-fetch-site","same-site"),l.headers.set("Pragma","no-cache"),l.headers.set("Cache-Control","no-cache"),o){case"openai":l.headers.set("authorization",n),l.headers.set("content-type","application/json"),l.headers.set("origin","https://bettergpt.chat"),l.headers.set("referer","https://bettergpt.chat/"),l.headers.set("authority","api.openai.com");break;case"churchless":l.headers.set("authorization","Bearer sk-none"),l.headers.set("content-type","application/json"),l.headers.set("origin","https://acheong08.github.io"),l.headers.set("referer","https://acheong08.github.io/"),l.headers.set("authority","free.churchless.tech");break;case"kamiya":l.headers.set("authorization",h),l.headers.set("content-type","application/json"),l.headers.set("origin","https://chat.kamiya.dev"),l.headers.set("referer","https://chat.kamiya.dev/"),l.headers.set("authority","fastly-k1.kamiya.dev"),l.headers.set("path","/api/openai/chat/completions");break;case"kmyalogin":l.headers.set("authorization",h),l.headers.set("content-type","application/json"),l.headers.set("origin","https://www.kamiya.dev"),l.headers.set("referer","https://www.kamiya.dev/"),l.headers.set("authority","fastly-k1.kamiya.dev");break;default:return httpErrorHandler(404)}if("POST"===e.method&&t.pathname.endsWith("/completions")&&s){let d=await JSON.parse(s),p=d.messages,u=p[p.length-1],m=u.content,$=p[p.length-3],y="";if($&&(y=$.content),m.includes("WS[")||y.includes("WS[")){let f=[],g=0,w=m.match(/WS\[([^\]]+)\]/g);if(w)for(let k of w){let _=k.slice(3,-1);g<2&&(f.push(_),g++)}if(g=0,y){let b=y.match(/WS\[([^\]]+)\]/g);if(b)for(let v of b){let S=v.slice(3,-1);g<2&&(f.push(S),g++)}}let W=5,A=[];if(f.length<=2&&(W=10),f)for(let C of f)try{let q=await fetch(`https://api-ddg.iii.hair/search?q=${C}&max_results=${W}`),T=await q.json(),E=T.map(({title:e,body:t,href:a})=>`'${e}' : ${t} ; (${a})`).join("\n"),O=`

[${C}]
${E}`;A.push(O)}catch(j){try{let H=await fetch(`https://ddg-api.herokuapp.com/search?query=${C}&limit=${W}`),z=await H.json(),G=z.map(({title:e,snippet:t,link:a})=>`'${e}' : ${t} ; (${a})`).join("\n"),B=`

[${C}]
${G}`;A.push(B)}catch(M){return httpErrorHandler(502)}}u.content=`${m.replace(/WS\[[^\]]*\]/g,"")}

Current date:${new Date().toLocaleString()} UTC

Instructions: Answer me in the language used in my request or question above. Answer the questions or requests I made above in a comprehensive way. Below are some web search results. Use them if you need.
${A}`,d.messages[p.length-1]=u,l=new Request(l,{body:JSON.stringify(d)})}}try{let P=await fetch(l),R=new Response(P.body,P),x=httpErrorHandler(R.status);if(("POST"===e.method||"GET"===e.method)&&t.pathname.endsWith("/completions")&&x)return x;return R.headers.set("Access-Control-Allow-Origin",a),R}catch(I){return httpErrorHandler(502)}}addEventListener("fetch",e=>{e.respondWith(handleRequest(e.request).catch(({stack:e})=>new Response(e,{headers:{"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*"},status:500})))});
