addEventListener("fetch",e=>{e.respondWith(handleRequest(e.request).catch(({stack:e})=>new Response(e,{headers:{"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"},status:500})))});async function handleRequest(e){let t={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"};if(e.url===`${new URL(e.url).origin}/`){let a=await e.clone().text(),n={url:e.url,method:e.method,data:a,headers:Object.fromEntries(e.headers),cf:Object.fromEntries(Object.entries(e.cf))};return new Response(JSON.stringify(n,null,2),{headers:t})}function s(e){var a;let n={400:"Bad Request",401:"Unauthorized",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",408:"Request Timeout",410:"Gone",413:"Payload Too Large",429:"Too Many Requests",500:"Internal Server Error",502:"Bad Gateway",503:"Service Unavailable"};return n[e]?(a=n[e],new Response(JSON.stringify({error:{message:`${e} ${a}`,code:e}},null,2),{headers:t,status:e})):null}if("POST"!==e.method&&"GET"!==e.method&&"OPTIONS"!==e.method)return s(405);let r=new URL(e.url),o=["completions","generations","transcriptions","edits","embeddings","translations","variations","files","fine-tunes","moderations","models","openai","churchless","kamiya"],i="https://gist.githubusercontent.com/DoingDog/5d9f8228d02645bb2ace999de796e5b9/raw/fakeModels.json",h=await e.clone().text(),l=r.pathname.split("?")[0].split("/").pop(),c="undefined"!=typeof API_KEY&&""!==API_KEY?API_KEY.split(","):["sk-xxxxxxxxxx"],p="undefined"!=typeof KAMIYA_TOKEN&&""!==KAMIYA_TOKEN?KAMIYA_TOKEN.split(","):["eyxxxx.eyxxxx"],d="undefined"!=typeof PASSWORD&&""!==PASSWORD?PASSWORD.split(","):["cpcw"],m=`Bearer ${c[Math.floor(Math.random()*c.length)]}`,u=`Bearer ${p[Math.floor(Math.random()*p.length)]}`;if(o.includes(l)&&("POST"===e.method||"GET"===e.method)){let g=e.headers.get("Authorization");if(!g)return s(401);let f=g.substring(7);d.includes(f)||(m=g,u=g)}else if(!o.includes(l)&&!["usage","login","getDetails"].includes(l))return s(403);let y=Object.fromEntries(e.headers);switch(Object.assign(y,{"user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36","sec-ch-ua":'"Chromium";v="116", "Google Chrome";v="116", "Not:A-Brand";v="99"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"macOS"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site",Pragma:"no-cache","Cache-Control":"no-cache","content-type":"application/json","X-Forwarded-For":"1.1.1.1","X-Real-IP":"1.1.1.1"}),!0){case r.pathname.startsWith("/openai"):case r.pathname.startsWith("/v1/"):r.host="api.openai.com",r.pathname=r.pathname.replace(/^\/openai\//,"/"),r.pathname=r.pathname.replace(/^\/openai$/,"/v1/chat/completions"),Object.assign(y,{authorization:m,origin:"https://bettergpt.chat",referer:"https://bettergpt.chat/",authority:r.host});break;case r.pathname.startsWith("/churchless"):if(r.pathname.endsWith("/models")){let w=await fetch(i);return new Response(w.body,{headers:t})}r.host="free.churchless.tech",r.pathname=r.pathname.replace(/^\/churchless\//,"/"),r.pathname=r.pathname.replace(/^\/churchless$/,"/v1/chat/completions"),Object.assign(y,{origin:"https://acheong08.github.io",referer:"https://acheong08.github.io/",authority:r.host});break;case r.pathname.startsWith("/kamiya"):if(r.pathname.endsWith("/models")){let $=await fetch(i);return new Response($.body,{headers:t})}r.host="fastly-k1.kamiya.dev",r.pathname=r.pathname.replace(/^\/kamiya\//,"/"),r.pathname=r.pathname.replace(/^\/kamiya$/,"/v1/chat/completions"),r.pathname=r.pathname.replace(/^\/v1\//,"/api/openai/"),Object.assign(y,{authorization:u,origin:"https://chat.kamiya.dev",referer:"https://chat.kamiya.dev/",authority:r.host,path:"/api/openai/chat/completions"});break;case r.pathname.startsWith("/kmyalogin"):r.host="fastly-k1.kamiya.dev",r.pathname=r.pathname.replace(/^\/kmyalogin\//,"/"),Object.assign(y,{authorization:u,origin:"https://www.kamiya.dev",referer:"https://www.kamiya.dev/",authority:r.host});break;default:return s(404)}let _=new Headers;Object.entries(y).forEach(([e,t])=>{_.append(e,t)});let b;try{b=new Request(r.toString(),{headers:_,body:e.body,method:e.method,redirect:"follow"})}catch(v){return s(400)}if("POST"===e.method&&r.pathname.endsWith("/completions")&&h)try{let k=JSON.parse(h),x=k.messages,A=x[x.length-1],C=A.content,S=x[x.length-3]?.content||"";if(C.includes("WS[")||S.includes("WS[")){let T=[];function W(e,t){let a=0,n=e.match(/WS\[[^\]]+\]/g);return n&&n.forEach(e=>{let n=e.slice(3,-1);a<2&&(t.push(n),a++)}),null}if(W(C,T),S&&W(S,T),T.length>=1){let q=[],O=T.length<=2?10:5;for(let E of T)try{let G=await fetch(`https://api-ddg.iii.hair/search?q=${E}&max_results=${O}`),P=await G.json(),j=P.map(({title:e,body:t,href:a})=>`'${e}' : ${t} ; (${a})`).join("\n");q.push(`

[${E}]
${j}`)}catch(M){try{let R=await fetch(`https://ddg-api.herokuapp.com/search?query=${E}&limit=${O}`),z=await R.json(),B=z.map(({title:e,snippet:t,link:a})=>`'${e}' : ${t} ; (${a})`).join("\n");q.push(`

[${E}]
${B}`)}catch(I){return s(502)}}A.content=`${C.replace(/WS\[[^\]]*\]/g,"")}

Current date:${new Date().toLocaleString()} UTC

Instructions: Reply to me in the language of my request or question above. Give a comprehensive answer to the question or request I have made above. Below are some results from a web search. Use them if necessary.
${q}`,k.messages[x.length-1]=A,b=new Request(b,{body:JSON.stringify(k)})}}}catch(H){return s(400)}try{let F=await fetch(b),N=s(F.status);if(("POST"===e.method||"GET"===e.method)&&r.pathname.endsWith("/completions")&&N)return N;let U=new Response(F.body,F);return U.headers.set("Access-Control-Allow-Origin",e.headers.get("Access-Control-Allow-Origin")||"*"),U.headers.set("Access-Control-Allow-Headers",e.headers.get("Access-Control-Allow-Headers")||"*"),U}catch(D){return s(502)}}
