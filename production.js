const myopenaikey="Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",myapipassword="Bearer 12345678",myua="Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36";async function handleRequest(e){let t=await e.clone().text(),a=new URL(e.url),s="ini",n=ini,h="ini",r=e.headers.get("Access-Control-Allow-Origin")||"*";if((a.pathname.endsWith("/completions")||a.pathname.endsWith("/generations")||a.pathname.endsWith("/transcriptions")||a.pathname.endsWith("/edits")||a.pathname.endsWith("/embeddings")||a.pathname.endsWith("/translations")||a.pathname.endsWith("/variations")||a.pathname.endsWith("/files")||a.pathname.endsWith("/fine-tunes")||a.pathname.endsWith("/moderations"))&&("POST"===e.method||"GET"===e.method)){let i=e.headers.get("Authorization");if(!i)return new Response(null,{status:401});n="Bearer 12345678"!==i?i:"Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}if(a.pathname.startsWith("/openai")||a.pathname.startsWith("/v1"))h="https://api.openai.com",a.host=h.replace(/^https?:\/\//,""),a.pathname=a.pathname.replace(/^\/openai\//,"/"),s="openai";else{if(!a.pathname.startsWith("/churchless"))return new Response(null,{status:404});h="https://free.churchless.tech",a.host=h.replace(/^https?:\/\//,""),a.pathname=a.pathname.replace(/^\/churchless\//,"/"),s="churchless"}let o=new Request(a.toString(),{headers:e.headers,body:e.body,method:e.method,redirect:"follow"});if(o.headers.set("user-agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"),o.headers.set("sec-ch-ua",'"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"'),o.headers.set("sec-ch-ua-mobile","?0"),o.headers.set("sec-ch-ua-platform",'"macOS"'),o.headers.set("sec-fetch-dest","empty"),o.headers.set("sec-fetch-mode","cors"),o.headers.set("sec-fetch-site","same-origin"),o.headers.set("Pragma","no-cache"),o.headers.set("Cache-Control","no-cache"),"openai"===s?(o.headers.set("authorization",n),o.headers.set("content-type","application/json"),o.headers.set("origin","https://bettergpt.chat"),o.headers.set("referer","https://bettergpt.chat/"),o.headers.set("authority","api.openai.com")):"churchless"===s&&(o.headers.set("authorization","Bearer sk-none"),o.headers.set("content-type","application/json"),o.headers.set("origin","https://acheong08.github.io"),o.headers.set("referer","https://acheong08.github.io/"),o.headers.set("authority","free.churchless.tech")),"POST"===e.method&&a.pathname.endsWith("/completions")&&t){let x=await JSON.parse(t),c=x.messages,l=c[c.length-1],p=l.content,d=c[c.length-3],u="";if(d&&(u=d.content),p.includes("WS[")||u.includes("WS[")){let m=[],f=0,g=p.match(/WS\[([^\]]+)\]/g);if(g)for(let w of g){let y=w.slice(3,-1);f<2&&(m.push(y),f++)}if(f=0,u){let W=u.match(/WS\[([^\]]+)\]/g);if(W)for(let $ of W){let _=$.slice(3,-1);f<2&&(m.push(_),f++)}}let b=5,S=[];if(m.length<=2&&(b=10),m)for(let k of m)try{let q=`https://duckduckgo-api.vercel.app/search?q=${k}&max_results=${b}`,A=await fetch(q),C=await A.json(),v=C.map(e=>`'${e.title}' : ${e.body} ; (${e.href})`).join("\n"),j=`

[${k}]
${v}`;S.push(j)}catch(M){try{let B=`https://api-ddg.iii.hair/search?q=${k}&max_results=${b}`,O=await fetch(B),T=await O.json(),z=T.map(e=>`'${e.title}' : ${e.body} ; (${e.href})`).join("\n"),G=`

[${k}]
${z}`;S.push(G)}catch(I){try{let K=`https://ddg-api.herokuapp.com/search?query=${k}&limit=${b}`,L=await fetch(K),P=await L.json(),H=P.map(e=>`'${e.title}' : ${e.snippet} ; (${e.link})`).join("\n"),R=`

[${k}]
${H}`;S.push(R)}catch(U){return new Response(null,{status:502})}}}let X=new Date,E=p.replace(/WS\[[^\]]*\]/g,""),N=`${E}

Current date:${X.toLocaleString()} UTC

Instructions: Answer me in the language used in my request or question above. Answer the questions or requests I made above in a comprehensive way. Below are some web search results. Use them if you need.
${S}`;l.content=N,x.messages[c.length-1]=l,o=new Request(o,{body:JSON.stringify(x)})}}try{let D=await fetch(o),F=new Response(D.body,D);return F.headers.set("Access-Control-Allow-Origin",r),F}catch(J){return new Response(null,{status:502})}}addEventListener("fetch",e=>{e.respondWith(handleRequest(e.request).catch(e=>new Response(e.stack,{status:500})))});
