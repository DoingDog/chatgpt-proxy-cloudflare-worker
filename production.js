addEventListener("fetch",e=>{e.respondWith(handleRequest(e.request).catch(({stack:e})=>new Response(e,{headers:{"Content-Type":"text/plain;charset=utf8","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"},status:500})))});async function handleRequest(e){let t={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"*"};if(e.url===`${new URL(e.url).origin}/`){let a=await e.clone().text(),n={url:e.url,method:e.method,data:a,headers:Object.fromEntries(e.headers),cf:Object.fromEntries(Object.entries(e.cf))};return new Response(JSON.stringify(n,null,2),{headers:t})}function s(e){var a;let n={400:"Bad Request",401:"Unauthorized",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",408:"Request Timeout",410:"Gone",413:"Payload Too Large",429:"Too Many Requests",500:"Internal Server Error",502:"Bad Gateway",503:"Service Unavailable"};return n[e]?(a=n[e],new Response(JSON.stringify({error:{message:`${e} ${a}`,code:e}},null,2),{headers:t,status:e})):null}if("POST"!==e.method&&"GET"!==e.method&&"OPTIONS"!==e.method)return s(405);let r=new URL(e.url),o=["completions","generations","transcriptions","edits","embeddings","translations","variations","files","fine-tunes","moderations","models","listBaseModel","openai","kamiya","generate","conversation"],i=await e.clone().text(),l=r.pathname.split("?")[0].split("/").pop(),h="undefined"!=typeof API_KEY&&""!==API_KEY?API_KEY.split(","):["sk-xxxxxxxxxx"],c="undefined"!=typeof KAMIYA_TOKEN&&""!==KAMIYA_TOKEN?KAMIYA_TOKEN.split(","):["sk-xxxxxxxxxx"],d="undefined"!=typeof PASSWORD&&""!==PASSWORD?PASSWORD.split(","):["cpcw"],p=`Bearer ${h[Math.floor(Math.random()*h.length)]}`,u=`Bearer ${c[Math.floor(Math.random()*c.length)]}`;if(o.includes(l)&&("POST"===e.method||"GET"===e.method)){let m=e.headers.get("Authorization");if(!m)return s(401);let g=m.substring(7);d.includes(g)||(p=m,u=m)}else if(!o.includes(l)&&!["usage","getDetails","history","subscription"].includes(l))return s(403);let f=Object.fromEntries(e.headers);switch(Object.assign(f,{"user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36","sec-ch-ua":'"Chromium";v="116", "Google Chrome";v="116", "Not:A-Brand";v="99"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"macOS"',"sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site",Pragma:"no-cache","Cache-Control":"no-cache","content-type":"application/json","X-Forwarded-For":"1.1.1.1","X-Real-IP":"1.1.1.1"}),!0){case r.pathname.startsWith("/openai"):case r.pathname.startsWith("/v1/"):r.host="api.openai.com",r.pathname=r.pathname.replace(/^\/openai\//,"/"),r.pathname=r.pathname.replace(/^\/openai$/,"/v1/chat/completions"),Object.assign(f,{authorization:p,origin:"https://bettergpt.chat",referer:"https://bettergpt.chat/",authority:r.host});break;case r.pathname.startsWith("/kamiya"):if(r.pathname.endsWith("/models")){let y=await fetch("https://gist.githubusercontent.com/DoingDog/5d9f8228d02645bb2ace999de796e5b9/raw/fakeModels.json");return new Response(y.body,{headers:t})}if(r.host="p0.kamiya.dev",r.pathname.endsWith("/subscription")){let w=await fetch(`https://${r.host}/api/session/getDetails`,{headers:{Authorization:u}}),$=await w.json(),b=$.data.credit;return new Response(JSON.stringify({object:"billing_subscription",has_payment_method:!1,canceled:!1,canceled_at:null,delinquent:null,access_until:3376656e3,hard_limit_usd:b,system_hard_limit_usd:b,plan:{title:"Explore",id:"free"},primary:!0,account_name:"Restful API Inc",po_number:null,billing_email:null,tax_ids:null,billing_address:null,business_address:null},null,2),{headers:t})}r.pathname=r.pathname.replace(/^\/kamiya\//,"/"),r.pathname=r.pathname.replace(/^\/kamiya$/,"/v1/chat/completions"),r.pathname=r.pathname.replace(/^\/v1\//,"/api/openai/"),r.pathname=r.pathname.replace(/^\/usage$/,"/api/session/getDetails"),Object.assign(f,{authorization:u,origin:"https://chat.kamiya.dev",referer:"https://chat.kamiya.dev/",authority:r.host});break;default:return s(404)}let _=new Headers;Object.entries(f).forEach(([e,t])=>{_.append(e,t)});let x;try{x=new Request(r.toString(),{headers:_,body:e.body,method:e.method,redirect:"follow"})}catch(A){return s(400)}if("POST"===e.method&&r.pathname.endsWith("/completions")&&i)try{let v=JSON.parse(i),C=v.messages,S=C[C.length-1],k=S.content,T=C[C.length-3]?.content||"";if(k.includes("WS[")||T.includes("WS[")){let q=[];function W(e,t){let a=0,n=e.match(/WS\[[^\]]+\]/g);return n&&n.forEach(e=>{let n=e.slice(3,-1);a<2&&(t.push(n),a++)}),null}if(W(k,q),T&&W(T,q),q.length>=1){let O=[],E=q.length<=2?10:5;for(let j of q)try{let P=await fetch(`https://s0.awsl.app/search?q=${j}&max_results=${E}`),G=await P.json(),I=G.map(({title:e,body:t,href:a})=>`'${e}' : ${t} ; (${a})`).join("\n");O.push(`

[${j}]
${I}`)}catch(M){try{let R=await fetch(`https://ddg-api.herokuapp.com/search?query=${j}&limit=${E}`),B=await R.json(),z=B.map(({title:e,snippet:t,link:a})=>`'${e}' : ${t} ; (${a})`).join("\n");O.push(`

[${j}]
${z}`)}catch(D){return s(502)}}S.content=`${k.replace(/WS\[[^\]]*\]/g,"")}

Current date:${new Date().toLocaleString()} UTC

Instructions: Reply to me in the language of my request or question above. Give a comprehensive answer to the question or request I have made above. Below are some results from a web search. Use them if necessary.
${O}`,v.messages[C.length-1]=S,x=new Request(x,{body:JSON.stringify(v)})}}}catch(H){return s(400)}try{let F=await fetch(x),N=s(F.status);if(("POST"===e.method||"GET"===e.method)&&r.pathname.endsWith("/completions")&&N)return N;let U=new Response(F.body,F);return U.headers.set("Access-Control-Allow-Origin",e.headers.get("Access-Control-Allow-Origin")||"*"),U.headers.set("Access-Control-Allow-Headers",e.headers.get("Access-Control-Allow-Headers")||"*"),U}catch(L){return s(502)}}
